{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Thunks for async actions\nexport const createPost = createAsyncThunk(\"posts/createPost\", async (postData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(\"http://localhost:4000/blogs/posts\", postData, {\n      headers: {\n        Authorization: `${localStorage.getItem(\"token\")}`\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data.message);\n  }\n});\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(\"http://localhost:4000/blogs/posts\");\n    return response.data.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data.message);\n  }\n});\nexport const fetchPost = createAsyncThunk(\"posts/fetchPost\", async (postId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(`http://localhost:4000/blogs/posts/${postId}`);\n    return response.data.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data.message);\n  }\n});\nexport const updatePost = createAsyncThunk(\"posts/updatePost\", async ({\n  postId,\n  postData\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.put(`http://localhost:4000/blogs/posts/${postId}`, postData, {\n      headers: {\n        Authorization: `${localStorage.getItem(\"token\")}`\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data.message);\n  }\n});\nexport const deletePost = createAsyncThunk(\"posts/deletePost\", async (postId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.delete(`http://localhost:4000/blogs/posts/${postId}`, {\n      headers: {\n        Authorization: `${localStorage.getItem(\"token\")}`\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data.message);\n  }\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: [],\n    post: null,\n    status: \"idle\",\n    error: null\n  },\n  extraReducers: builder => {\n    builder.addCase(createPost.pending, state => {\n      state.status = \"loading\";\n    }).addCase(createPost.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.posts.push(action.payload);\n    }).addCase(createPost.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    }).addCase(fetchPosts.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.posts = action.payload;\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    }).addCase(fetchPost.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchPost.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.post = action.payload;\n    }).addCase(fetchPost.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    }).addCase(updatePost.pending, state => {\n      state.status = \"loading\";\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      const index = state.posts.findIndex(post => post._id === action.payload._id);\n      if (index !== -1) {\n        state.posts[index] = action.payload;\n      }\n    }).addCase(updatePost.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    }).addCase(deletePost.pending, state => {\n      state.status = \"loading\";\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.posts = state.posts.filter(post => post._id !== action.meta.arg);\n    }).addCase(deletePost.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload;\n    });\n  }\n});\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","createPost","postData","rejectWithValue","response","post","headers","Authorization","localStorage","getItem","data","error","message","fetchPosts","_","get","fetchPost","postId","updatePost","put","deletePost","delete","postsSlice","name","initialState","posts","status","extraReducers","builder","addCase","pending","state","fulfilled","action","push","payload","rejected","index","findIndex","_id","filter","meta","arg","reducer"],"sources":["/home/technource/Documents/blogpostBoth/my_app/src/store/blogSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Thunks for async actions\nexport const createPost = createAsyncThunk(\n  \"posts/createPost\",\n  async (postData, { rejectWithValue }) => {\n    try {\n      const response = await axios.post(\n        \"http://localhost:4000/blogs/posts\",\n        postData,\n        {\n          headers: { Authorization: `${localStorage.getItem(\"token\")}` },\n        }\n      );\n      return response.data.data;\n    } catch (error) {\n      return rejectWithValue(error.response.data.message);\n    }\n  }\n);\n\nexport const fetchPosts = createAsyncThunk(\n  \"posts/fetchPosts\",\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/blogs/posts\");\n      return response.data.data;\n    } catch (error) {\n      return rejectWithValue(error.response.data.message);\n    }\n  }\n);\n\nexport const fetchPost = createAsyncThunk(\n  \"posts/fetchPost\",\n  async (postId, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(\n        `http://localhost:4000/blogs/posts/${postId}`\n      );\n      return response.data.data;\n    } catch (error) {\n      return rejectWithValue(error.response.data.message);\n    }\n  }\n);\n\nexport const updatePost = createAsyncThunk(\n  \"posts/updatePost\",\n  async ({ postId, postData }, { rejectWithValue }) => {\n    try {\n      const response = await axios.put(\n        `http://localhost:4000/blogs/posts/${postId}`,\n        postData,\n        {\n          headers: { Authorization: `${localStorage.getItem(\"token\")}` },\n        }\n      );\n      return response.data.data;\n    } catch (error) {\n      return rejectWithValue(error.response.data.message);\n    }\n  }\n);\n\nexport const deletePost = createAsyncThunk(\n  \"posts/deletePost\",\n  async (postId, { rejectWithValue }) => {\n    try {\n      const response = await axios.delete(\n        `http://localhost:4000/blogs/posts/${postId}`,\n        {\n          headers: { Authorization: `${localStorage.getItem(\"token\")}` },\n        }\n      );\n      return response.data.data;\n    } catch (error) {\n      return rejectWithValue(error.response.data.message);\n    }\n  }\n);\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: [],\n    post: null,\n    status: \"idle\",\n    error: null,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createPost.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(createPost.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        state.posts.push(action.payload);\n      })\n      .addCase(createPost.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload;\n      })\n      .addCase(fetchPosts.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        state.posts = action.payload;\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload;\n      })\n      .addCase(fetchPost.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchPost.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        state.post = action.payload;\n      })\n      .addCase(fetchPost.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload;\n      })\n      .addCase(updatePost.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(updatePost.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        const index = state.posts.findIndex(\n          (post) => post._id === action.payload._id\n        );\n        if (index !== -1) {\n          state.posts[index] = action.payload;\n        }\n      })\n      .addCase(updatePost.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload;\n      })\n      .addCase(deletePost.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(deletePost.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        state.posts = state.posts.filter(\n          (post) => post._id !== action.meta.arg\n        );\n      })\n      .addCase(deletePost.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload;\n      });\n  },\n});\n\nexport default postsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}